
#!/usr/bin/env python

'''
Test_bdsm.py
'''


#############
#  IMPORTS  #
#############
# standard python packages
import inspect, logging, os, pickledb, random, rdflib, sqlite3, sys, unittest
from StringIO import StringIO
from pymongo import MongoClient

import BDSM


SAVEPATH      = os.path.abspath( __file__ + "/../../../bdsm/src" )
MONGOSAVEPATH = os.path.abspath( __file__ + "/../../dbtmp")

###############
#  TEST BDSM  #
###############
class Test_bdsm( unittest.TestCase ) :

  logging.basicConfig( format='%(levelname)s:%(message)s', level=logging.DEBUG )
  #logging.basicConfig( format='%(levelname)s:%(message)s', level=logging.INFO )


  ###############
  #  EXAMPLE 4  #
  ###############
  # test passing verify on insert for pickle db
  def test_example4( self ) :

    test_id = "test_example4"

    logging.info( "  Running test " + test_id )

    # --------------------------------------------------------------- #
    # create bdsm instance
    bdsm = BDSM.BDSM( "mongodb" )
    bdsm.MONGOSAVEPATH = MONGOSAVEPATH
    logging.debug( "  " + test_id + " : instantiated BDSM instance '" + str( bdsm ) + "' with db type '" + bdsm.nosql_type + "'"  )

    # --------------------------------------------------------------- #
    # input ontology

    bdsm.loadOntology( "./example_ontology.ttl" )

    # --------------------------------------------------------------- #
    # build database

    anInsert = { "name":"Elsa", "age":21, "City":"arendelle", "Country":"norway" }

    print bdsm.verify( anInsert, [ 'name', 'age' ] )

#    self.assertEqual( bdsm.verify( anInsert, [ 'name', 'age' ] ), True )

    # --------------------------------------------------------------- #
    # create db instance

    logging.debug( "Creating mongo db instance at " + DBPATH + "\n\n" )
  
    # establsih clean target dir for db
    if not os.path.exists( MONGOSAVEPATH ) :
      os.system( "mkdir " + MONGOSAVEPATH + " ; " )
    else :
      os.system( "rm -rf " + DBPATH + " ; " )
      os.system( "mkdir " + DBPATH + " ; " )
  
    # build mongodb instance
    os.system( "mongod --dbpath " + DBPATH + " &" )
  
    client = MongoClient()
    db = client.testdb


    # --------------------------------------------------------------- #
    # perform insertion

    id1 = b.insert_one( anInsert ).inserted_id

    # --------------------------------------------------------------- #
    # output db contents

    pprint.pprint( b.find_one( { "_id": bid1 } ) )

    # --------------------------------------------------------------- #
    # destroy instance
    db.testdb.drop()

    client.close()

    # get instance id
    os.system( "pgrep mongod 2>&1 | tee dbid.txt" )
    fo     = open( "dbid.txt", "r" )
    dbid   = fo.readline()
    fo.close()
    os.system( "rm " + CURR_PATH + "/dbid.txt" )
  
    if DEBUG :
      print "dbid = " + dbid
  
    os.system( "kill " + dbid )


  ###############
  #  EXAMPLE 3  #
  ###############
  # test failing verify and explanation on insert for pickle db
  def test_example3( self ) :

    test_id = "test_example3"

    logging.info( "  Running test " + test_id )

    # --------------------------------------------------------------- #
    # create db instance

    logging.info( "  " + test_id + ": initializing pickledb instance." )
    dbInst = pickledb.load( "./test_yprov.db", False )

    # --------------------------------------------------------------- #
    # create bdsm instance
    bdsm = BDSM.BDSM( "pickledb" )
    logging.debug( "  " + test_id + " : instantiated BDSM instance '" + str( bdsm ) + "' with db type '" + bdsm.nosql_type + "'"  )

    # --------------------------------------------------------------- #
    # input ontology

    bdsm.loadOntology( "./example_ontology.ttl" )

    # --------------------------------------------------------------- #
    # build database

    anInsert = { "name":"Elsa", "age":21, "City":"losangeles", "Country":"norway" } 

    self.assertEqual( bdsm.verify( anInsert, [ 'name', 'age' ] ), False )
    self.assertEqual( bdsm.explain( anInsert, [ 'name', 'age' ] ), ["EXPLANATION : no predicates map subject 'losangeles' to object 'City'"] )

    # --------------------------------------------------------------- #
    # perform insertion

    anID = "thisIsAnID"
    dbInst.set( anID, anInsert )

    # --------------------------------------------------------------- #
    # output db contents

    logging.debug( "OUTPUTTING PICKLE DB CONTENTS TO STDOUT :" )
    allKeys = dbInst.getall()
    for key in allKeys :
      logging.debug( dbInst.get( key ) )

    # --------------------------------------------------------------- #
    dbInst.deldb()


  ###############
  #  EXAMPLE 2  #
  ###############
  # test passing verify on insert for pickle db
  def test_example2( self ) :

    test_id = "test_example2"

    logging.info( "  Running test " + test_id )

    # --------------------------------------------------------------- #
    # create db instance

    logging.info( "  " + test_id + ": initializing pickledb instance." )
    dbInst = pickledb.load( "./test_yprov.db", False )

    # --------------------------------------------------------------- #
    # create bdsm instance
    bdsm = BDSM.BDSM( "pickledb" )
    logging.debug( "  " + test_id + " : instantiated BDSM instance '" + str( bdsm ) + "' with db type '" + bdsm.nosql_type + "'"  )

    # --------------------------------------------------------------- #
    # input ontology

    bdsm.loadOntology( "./example_ontology.ttl" )

    # --------------------------------------------------------------- #
    # build database

    anInsert = { "name":"Elsa", "age":21, "City":"arendelle", "Country":"norway" }

    self.assertEqual( bdsm.verify( anInsert, [ 'name', 'age' ] ), True )

    # --------------------------------------------------------------- #
    # perform insertion

    anID = "thisIsAnID"
    dbInst.set( anID, anInsert )

    # --------------------------------------------------------------- #
    # output db contents

    logging.debug( "OUTPUTTING PICKLE DB CONTENTS TO STDOUT :" )
    allKeys = dbInst.getall()
    for key in allKeys :
      logging.debug( dbInst.get( key ) )

    # --------------------------------------------------------------- #
    dbInst.deldb()


  ###############
  #  EXAMPLE 1  #
  ###############
  # test bad load file
  def test_example1( self ) :

    test_id = "test_example1"

    logging.info( "  Running test " + test_id )

    # --------------------------------------------------------------- #
    # create bdsm instance
    bdsm = BDSM.BDSM( )
    logging.debug( "  " + test_id + " : instantiated BDSM instance '" + str( bdsm ) + "' with db type '" + bdsm.nosql_type + "'"  )

    # --------------------------------------------------------------- #
    # input ontology

    with self.assertRaises(SystemExit) as cm:
      exitResult = bdsm.loadOntology( "./someFileName.ttl" )
    self.assertEqual( cm.exception.code, "  LOAD ONTOLOGY : file not found './someFileName.ttl'" )

  # =========================================================================== #
  # =========================================================================== #

  ###########################
  #  CREATE MONGO INSTANCE  #
  ###########################
  def createMongoInstance() :
  
    logging.debug( "Creating mongo db instance at " + DBPATH + "\n\n" )
  
    # establsih clean target dir for db
    if not os.path.exists( DBPATH ) :
      os.system( "mkdir " + DBPATH + " ; " )
    else :
      os.system( "rm -rf " + DBPATH + " ; " )
      os.system( "mkdir " + DBPATH + " ; " )
  
    # build mongodb instance
    os.system( "mongod --dbpath " + DBPATH + " &" )


#########
#  EOF  #
#########
